nextflow.enable.dsl=2

params {

    // general parameters
    help = false

    // RIBOSEQ_ANNOTATE_PIPE
    gtf = "${projectDir}/data/annotation99/Mus_musculus.GRCm38.99.chr.gtf"
    lct_script = "${projectDir}/data/find_longest_coding_transcripts.py"
    other_RNAs_sequence = "${projectDir}/data/annotation99/mm10_rrnas.fa"
    genome = "${projectDir}/data/annotation99/Mus_musculus.GRCm38.dna_sm.primary_assembly.fa"
    ctdCDS_script = "${projectDir}/data/create_tab_delimited_CDS_file.py"
    riboseq_annotate_outDir = "${projectDir}/riboseq_annotate_results"

    // RIBOSEQ_PROCESS_DATA_PIPE
    // general input
    reads = "${projectDir}/data/samples_arka/*"
    oligos = "${projectDir}/data/oligos.txt"
    other_RNAs_sequence = "${projectDir}/data/annotation99/mm10_rrnas.fa"
    count_oligos_script = "${projectDir}/data/count_oligos.py"
    //other_RNAs_index
    //transcripts_index
    find_overepresented_sequences_script = "${projectDir}/data/find_overepresented_sequences.py"
    //transcripts_sequence
    plot_read_lengths_script = "${projectDir}/data/plot_read_lengths.py"
    //transcript_id_gene_id_CDS
    determine_p_site_offsets_script = "${projectDir}/data/determine_p_site_offsets.py"
    count_reads_script = "${projectDir}/data/count_reads.py"
    check_periodicity_script = "${projectDir}/data/check_periodicity.py"
    filter_reads_based_on_read_lengths_and_offsets_script = "${projectDir}/data/filter_reads_based_on_read_lengths_and_offsets.py"

    // TRIM_FIRST_BASES
    cut = 5
    minimum_length = 20

    // CLIP_READS
    clip_reads_v = "-v"
    clip_reads_n = "-n"
    clip_reads_l = 20
    clip_reads_c = "-c"
    clip_reads_adapter = 'AAAAAAAAAA'
    clip_reads_z = "-z"

    // TRIM_READS
    trim_reads_v = "-v"
    trim_reads_l = 20
    trim_reads_t = 20
    trim_reads_Q = 33
    trim_reads_z = "-z"

    // FILTER_READS
    filter_reads_v = "-v"
    filter_reads_q = 20
    filter_reads_p = "90"
    filter_reads_z = "-z"
    filter_reads_Q = 33

    // FASTQ_TO_FASTA
    fq_to_fa_v = "-v"
    fq_to_fa_n = "-n"
    fq_to_fa_r = "-r"

    // MAP_TO_OTHER_GENES
    map_to_other_genes_silent = "--silent"
    map_to_other_genes_accuracy = "90"

    // MAP_TO_TRANSCRIPTS
    map_to_transcripts_silent = "--silent"
    map_to_transcripts_accuracy = "90"

    // SAM_2_BAM_SORT_AND_INDEX
    //cluster_log = "sam2bam_sort_and_index_{sample}.log"

    // READ_LENGTH_HISTOGRAM
    //read_length_histogram_dir = "read_length"

    // DETERMINE_P_SITE_OFFSET
    //determine_p_site_offset_outdir = "{sample}/p_site_offsets"

    // COUNT_READS
    //count_reads_outdir = "counts"

    // CHECK_PERIODICITY
    //check_periodicity_outdir = "periodicity"
    check_peridocitiy_codnum = 100

    riboseq_process_data_outDir = "${projectDir}/riboseq_process_data_results"

    
    // PHILOSOPHER_PIPE
    workspace = "${projectDir}/workspace"
    philosopher_input = "${projectDir}/data/small_peptides/00{2,3}_TSP7-21_D19.mzML"
    philosopher_outDir = "${projectDir}/philosopher_results"
    philosopher_db = "${projectDir}/data/small_peptides/small_peptides_all_quad_samples.fasta"
    fragger_mode = "docker" // or "local"
    change_file_script = "${projectDir}/data/change_file.py"
    skip_proteinprophet = false

}

profiles {

    slurm {
        includeConfig 'config/slurm.config'
        params.fragger_ram = 64
    }

    docker {
        includeConfig 'config/docker.config'
        params.fragger_ram = 8
    }

}