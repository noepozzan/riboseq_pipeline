nextflow.enable.dsl=2

params {

	// principal input (riboseq_reads and proteomics_reads)
	// this might be the thought of as the test data
	// bc the pipeline has been extensively tested with this data
	// and if there is an error during the user's run, it is most
	// probably not due to the data
	riboseq_reads = './data/muscle_samples/*.gz'
	proteomics_reads = "${projectDir}/data/proteomics_reads/*.mzML"

	// secondary input
	// this will probably mostly left in its default state
	// but parametrizing it gives the user some more control
	// over the pipeline
	gtf = './data/Mus_musculus.GRCm38.99.chr.gtf'
	other_RNAs_sequence = './data/mm10_rrnas.fa'
	genome = './data/Mus_musculus.GRCm38.dna_sm.primary_assembly.fa'
	genome_fai = './data/Mus_musculus.GRCm38.dna_sm.primary_assembly.fa.fai'

    help = false
    run_count_oligos = false

    // PULL_CONTAINERS
    slurm_config = "${projectDir}/conf/slurm.config"
    pull_containers_file = "${projectDir}/data/python_scripts/pull_containers.py"
	singularity_store = "${HOME}/.singularity/cache/library"

    // CHECK_FILES_PIPE
    check_files_script = "${projectDir}/data/python_scripts/check_files.py"

    // ANNOTATE_PIPE
	lct_script = "${projectDir}/data/python_scripts/find_longest_coding_transcripts.py"
    ctdCDS_script = "${projectDir}/data/python_scripts/create_tab_delimited_CDS_file.py"

    // INDEX
    index_threads = 24 // or 16 

    // RIBOSEQ_PIPE
    count_oligos_script = "${projectDir}/data/python_scripts/count_oligos.py"
    find_overrepresented_sequences_script = "${projectDir}/data/python_scripts/find_overrepresented_sequences.py"
    plot_read_lengths_script = "${projectDir}/data/python_scripts/plot_read_lengths.py"
    determine_p_site_offsets_script = "${projectDir}/data/python_scripts/determine_p_site_offsets.py"
    count_reads_script = "${projectDir}/data/python_scripts/count_reads.py"
    check_periodicity_script = "${projectDir}/data/python_scripts/check_periodicity.py"
    filter_lengths_offsets_script = "${projectDir}/data/python_scripts/filter_reads_based_on_read_lengths_and_offsets.py"

    // TRIM_FIRST_BASES
    cut = 5
    minimum_length = 20

    // CLIP_READS
	clip_reads_args = "-v -n -l 20 -c -z -a AAAAAAAAAA"

    // TRIM_READS
	trim_reads_args = "-v -l 20 -t 20 -Q 33 -z"

    // FILTER_READS
	filter_reads_args = "-v -q 20 -p 90 -z -Q 33"

    // FASTQ_TO_FASTA
    fastq_to_fasta_args = "-v -n -r"

    // segemehl mapping
    segemehl_silent = "--silent"
    segemehl_accuracy = "90"
    segemehl_threads = "25"

	// star mapping
	star_map_threads = 24

    // CHECK_PERIODICITY
    check_peridocitiy_codnum = 100
   
    // RIBOTISH_PIPE
    ribotish_quality_th = 0.4
    ribotish_predict_mode = "--longest" // or ""
	sorf_peptide_script = "${projectDir}/data/python_scripts/find_sorf_peptide.py"

	// MOVE_RENAME
	rename_script = "${projectDir}/data/python_scripts/move_rename.py"
 
    // PHILOSOPHER_PIPE
	workspace = "${projectDir}/workspace"
    change_params_script = "${projectDir}/data/python_scripts/change_file.py"

}

params.run_qc = true

params.combine_peptideprophet = true
if ( params.combine_peptideprophet ) {
	params.peptideprophet_args = """--combine \
									--decoy rev_ \
									--ppm \
									--accmass \
									--expectscore \
									--decoyprobs \
									--nonparam \
									"""
}
if ( params.combine_peptideprophet == false ) {
	params.peptideprophet_args = """--decoy rev_ \
									--ppm \
									--accmass \
									--expectscore \
									--decoyprobs \
									--nonparam \
									"""
}

params.skip_proteinprophet = true
params.philosopher_filter_args = ""	
if ( params.skip_proteinprophet == false && params.combine_peptideprophet ) {
	params.philosopher_filter_args = """--psm 0.05 \
										--ion 0.05 \
										--pep 0.05 \
										--prot 1 \
										--sequential \
										--razor \
										--picked \
										--tag rev_
										"""
}

if ( params.skip_proteinprophet ) {

	params.philosopher_filter_args = """--picked \
           								--tag rev_ \
										"""
}

params {

	// publishDir
	annotate_dir = "results/annotate"
	riboseq_dir = "results/riboseq"
	ribotish_dir = "results/ribotish"
	philosopher_dir = "results/philosopher"

}

notification {

	enabled = true
	to = "pozzan.noe@gmail.com"
	from = "pozzan.noe@gmail.com"
	
}


profiles {

    slurm {
        includeConfig 'conf/slurm.config'
        params.fragger_ram = 80
        params.ionquant_ram = 80
    }

	slurm_offline {
        includeConfig 'conf/slurm_offline.config'
        params.fragger_ram = 80
        params.ionquant_ram = 80
    }

    docker {
        includeConfig 'conf/docker.config'
        params.fragger_ram = 8
        params.ionquant_ram = 8
    }

}
